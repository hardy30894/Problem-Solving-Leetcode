/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* build(vector<int>& pre, vector<int>& in, int InS, int InE, int PS, int PE){
        if(InS>InE || PS>PE){
            return NULL;
        }
        int rootData = pre[PS];
        int i=InS;
        while(i<InE && in[i]!=rootData){
            i++;
        }
        int InLS = InS;
        int InLE = i-1;
        int InRS = i+1;
        int InRE = InE;
        int ll = i-InS;
        int PLS = PS+1;
        int PLE = PLS+ll-1;
        int PRS = PLE+1;
        int PRE = PE;
        TreeNode *left = build(pre, in, InLS, InLE, PLS, PLE);
        TreeNode *right = build(pre, in, InRS, InRE, PRS, PRE);
        TreeNode *root = new TreeNode(rootData, left, right);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return build(preorder, inorder, 0, inorder.size()-1, 0, preorder.size()-1);
    }
};